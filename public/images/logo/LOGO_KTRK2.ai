%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 16.0.0
%%For: (mels) ()
%%Title: (LOGO OTRK.ai)
%%CreationDate: 11/21/2013 7:13 PM
%%Canvassize: 16383
%%BoundingBox: 16 209 822 505
%%HiResBoundingBox: 16 209.3984 822 504.5293
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: KTRK-KG
%%+ KTRK-RU
%%DocumentNeededFonts: KTRK-KG
%%+ KTRK-RU
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 421.5 296.7803 421.5 296.7803
%AI3_TileBox: -0.044922 0.040039 841.8154 595.0601
%AI3_DocumentPreview: None
%AI5_ArtSize: 841.8896 595.2803
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -315.3335 746.3335 1.5 2459 1260 26 1 0 51 122 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:114 -99
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 48 8
%%BeginData: 13036 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C453D373D373D373D373D373D373D373D373D373D373D373D373D373D
%373D373D373D373D373D373D373D373D373D373D373D373D373D373D373D
%373D373D1561FFFF6137373D373D373D373D373D373D373D373D373D373D
%373D373D373D373D373D373D373D373D373D373D373D373D373D373D373D
%373D373D373D373D373D3714373737143737371437373714373737143737
%371437373714373737143737371437373714373737143737371437373714
%373737143737371437373714375BFFFF6115371437373714373737143737
%371437373714373737143737371437373714373737143737371437373714
%37373714373737143737371437373714FD40371561FFFF5BFD3E37143714
%371437143714371437143714371437143714371437143714371437143714
%371437143714371437143714371437143714371437143714371437143736
%FFFF61143714371437143714371437143714371437143714371437143714
%371437143714371437143714371437143714371437143714371437143714
%371437143737373D3737373D3737373D3737373D3737373D3737373DFD04
%371537373D373715FD04373D3737373D3737373D3737373D3737373D3737
%373D37371561FFFF5BFD04373D3737373D3737373D3737373D3737373D37
%37373D3737153D373D37371537373D3737373D3737373D3737373D373737
%3D3737373D3737373D371437143714371437143714371437143714371437
%143714371415146185AFA9FFA98536371437143714371437143714371437
%14371437143714371437143736FFFF611437143714371437143714371437
%1437143714371437143714373785A9FFFFAF858536151437143714371437
%1437143714371437143714371437143714FD043714373737143737371437
%3737143737371437373714375BAFFD08FFA9611537143737371437373714
%373737143737371437373714371561FFFF5B371437373714373737143737
%3714373737143737371437156185FD09FF85371437373714373737143737
%371437373714373737143737371414371437143714371437143714371437
%1437143714370E3784FD0CFFAF36150E3714371437143714371437143714
%3714371437143736FFFF610E371437143714371437143714371437143714
%37141536A9FD0CFFA9610E37143714371437143714371437143714371437
%143714FD04373637373736373737363737373637373736373785FD10FF85
%3D15373637373736373737363737373637373736371561FFFF5B37363737
%373637373736373737363737373637153785FD11FF5B3714373737363737
%373637373736373737363737373614371437143714371437143714371437
%1437141536FD13FFA9610E37143714371437143714371437143714371437
%5AFFFF611437143714371437143714371437143714370E5BA9FD13FF8537
%0E3714371437143714371437143714371437143737143736371437363714
%37363714373637143761FD16FF8514371437363714373637143736371437
%36371461FFFF5A37363714373637143736371437363714371461FD16FFA9
%371437363714373637143736371437363714373614370E3714370E371437
%0E3714370E370E155AFD18FF850E370E3714370E3714370E3714370E3714
%1536FFFF5B0E3714370E3714370E3714370E3714370E61FD18FFA9370E37
%14370E3714370E3714370E3714370E373714373637143736371437363714
%3736375AFD1AFF85143736371437363714373637143736371461FFFF5A37
%36371437363714373637143736371461FD1AFF8537363714373637143736
%371437363714373614370E3714370E3714370E3714370E370EAFFD1AFFAF
%370E3714370E3714370E3714370E37141436FFFF5B0E3714370E3714370E
%3714370E37141484FD0FFFAFFD0BFF363714370E3714370E3714370E3714
%370E373714371437143714371437143714370E5BFD0EFFAF6185FD0BFF5B
%3714371437143714371437143714371461FFFF5A37143714371437143714
%371437143736FD0FFF6161FD0BFF850E3714371437143714371437143714
%37140E370E360E370E360E370E360E370E1436FD0DFF5A360E85FD0BFF85
%0E360E370E360E370E360E370E360E1536FFFF5B0E360E370E360E370E36
%0E370E360E37FD0CFFA9850E1436FD0BFF84140E370E360E370E360E370E
%360E370E363714371437143714371437143714370E85FD0BFF8536150E37
%85FD0BFF851514371437143714371437143714371461FFFF5A3714371437
%1437143714371437143736FD0BFF85370E371461FD0BFFAF0E3714371437
%14371437143714371437140E370E360E370E360E370E360E370E145AFD0A
%FFAF0E370E360E85FD0BFF850E360E370E360E370E360E370E360E1536FF
%FF610E360E370E360E370E360E370E360E61FD0BFF370E360E1536FD0BFF
%A9140E370E360E370E360E370E360E370E36370E3714370E3714370E3714
%370E370E85FD0AFFAF370E37141484FD0BFF843714370E3714370E371437
%0E3714370E61FFFF363714370E3714370E3714370E37141536FD0BFF3637
%14370E61FD0BFFAF14370E3714370E3714370E3714370E37140E360E360E
%360E360E360E360E360E145AFD0AFFAF0E140E360E85FD0BFF850E360E36
%0E360E360E360E360E360E1436FFFF5A0E360E360E360E360E360E360E36
%0E5AFD0BFF360E360E1436FD0BFF84360E360E360E360E360E360E360E36
%0E36370E3714370E3714370E3714370E370E85FD0AFFAF370E37141484FD
%0BFF841514370E3714370E3714370E3714370E61FFFF5A3714370E371437
%0E3714370E3714375AFD0BFF363714370E61FD0BFFAF0E370E3714370E37
%14370E3714370E37140E360E360E360E360E360E360E360E145AFD0AFFAF
%0E140E360E85FD0BFF850E360E360E360E360E360E360E360E0E36FFFF5A
%0E360E360E360E360E360E360E360E36FD0BFF360E360E0E36FD0BFF8414
%0E360E360E360E360E360E360E360E36370E360E370E360E370E360E370E
%360E5BFD0AFFA9370E360E1484FD0BFF5A140E370E360E370E360E370E36
%0E370E5BFFFF5A140E370E360E370E360E370E360E3736FD0BFF36140E37
%0E5BFD0BFF850E370E360E370E360E370E360E370E360E0E360E140E360E
%140E360E140E360E140E365AA9A8FD07FF0E140E140E85FD06FFA8AF8485
%36360E140E360E140E360E140E360E140E0E36FFFF5B0E140E360E140E36
%0E140E360E140E140E5A7EAFA9FFA9FD04FF360E140E0E36FD05FFA9FFA8
%A95A5A0E140E360E140E360E140E360E140E360E14370E360E370E360E37
%0E360E370E360E370E140E37363736615A855A370E360E3736855A615A5B
%36370E360E360E360E370E360E370E360E370E360E370E5BFFFF5A140E37
%0E360E370E360E370E360E370E360E140E360E3736615A8536360E370E37
%5A615A5B363736360E140E360E370E360E370E360E370E360E370E360E0E
%360E140E360E140E360E140E360E140E360E0E0E36FD070E360E140E140E
%0E0E140E0E0E360E140E360E140E360E140E360E140E360E140E1436FFFF
%5B0E140E360E140E360E140E360E140E360E140E360E0E0E140E0E0E360E
%140E360E0E0E140E0E0E360E0E0E360E140E360E140E360E140E360E140E
%360E14360E360E360E360E360E360E360E360E140E360E360E360E360E36
%0E360E360E360E360E360E360E360E360E360E360E360E360E360E360E36
%0E360E360E5BFFFF36140E360E360E360E360E360E360E360E360E360E36
%0E360E360E360E360E360E360E360E360E360E360E360E360E360E360E36
%0E360E360E360E360E360E0E0E0D140E0E0D140E0E0D140E0E0D36300E0E
%360E0E0D140E360E0E30360E360E360D360E0E0D360E0E0D360E0E30360E
%0E0D140E0E0D140E0E0D140E0E36FFFF5A0D140E0E0D140E0E0D140E0E0D
%140E0E0D140E0E0D360E360E0E0E360D360E0E0E14FD070E360E0E0D140E
%0E0D140E0E0D140E0E0D140E0E0D14360E360E360E360E360E360E360E36
%84855A855A6136615A855A5B5A85848585855A855A85303785145A378436
%5AA95A360E360E360E360E360E360E360E61FFFF36140E360E360E360E36
%0E360E360E360E360E3636855A85848536858485853630A936A930853685
%5A850E360E360E360E360E360E360E360E360E360E36FD040E360E0E0E36
%0E0E0E360E0E5A5A075A845B5A5A5A6184845A850D0E30615A8584615A85
%5AAF5A8536855A5A36610E0E0E360E0E0E360E0E0E360E0E36FFFF5A0D36
%0E0E0E360E0E0E360E0E0E360E0E0E360E36845A5A0E0EAF360E5AAF5A5A
%7E5A5A3630A95AA9FD050E360E0E0E360E0E0E360E0E0E360E0E0E36360E
%360E360E360E360E360E360E5A5A3684855AAF5A855AAF5A5A7E36365A5A
%855AAF5A855A5BA83684A95A8536A95A360E360E360E360E360E360E360E
%5AFFFF360E0E360E360E360E360E360E360E360E360E1436A93685366184
%8536855A85848584368436845B855A0E360E360E360E360E360E360E360E
%360E360E360E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5A5A36365A30857E85
%5A5A30365A360E36305A365A36360D5A0D36360E0D5A0E360D0E0D0E0D0E
%0D0E0D0E0D0E0D0E36FFFF5A0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E
%0D360E360D855A0E368530363036305A365A30360D36300E0D0E0D0E0D0E
%0D0E0D0E0D0E0D0E0D0E0D0E0D0E360E360E855A855A365A3636855A850E
%36360E0E610E360E610E855A365A5A5A6136360E360E5A0E5B5A615A3636
%360E360E360E5B0E5B0E5B84360E360E5AFFFF5A0E0E360E360E360E360E
%360E855A855AFD0436855A85300E5A0E0E5B0E360E5A30855A365A615A61
%5A855A3636610E5A0E360E360E360E360E360E360E0D0E0D0E5A855A5A0D
%A9365A3685848436850D36843636368485365A84857E8536855A605A367E
%5A30855A5A0D855A5A5A365A365A5A84365A5A360E0D0E36FFFF5A0D0E0D
%0E0D0E0D0E0D0E0D0E5A855A5A0E8530605A845A8536850D36845A365AA8
%85305A8484308536847EA95A5A5A85360E0D0E0D0E0D0E0D0E0D0E0D0E0E
%0E360E5A5A85365A3685845A5A853685845B5A365A855A85840E0EA95A85
%845A5A5B5A615AA984365A855A5A365B5A857E8584857EAF5A5A7E5A0E0E
%0D5AFFFF36FD040E360E0E0E360E0E0D5A5A853661365A5A855A85308585
%5A36365A855A85840E0EA95A85845A7E850E855A3684360E0E0E360E0E0E
%360E0E0E360E0D0E0D0E30FD045A0E30855A840D365A365A855A85843636
%845A855A845A85368584A984840DFD065A300D855A84360E5A5A0D5A5A84
%300E0D0E30FFFF5A070E0D0E0D0E0D0E0D0E0D0E30FD045A0E30855A840D
%365A365AA95A8584362F855A845A855A8436600D0E36360D5A0D0E0D0E0D
%0E0D0E0D0E0D0E0D0E300E360E360E3636360D360E360E360E0E0D363036
%0E360E0E0D360E0E0E300E360E5A3085300E0E300D3630300D360E360E36
%0E360D0E0E360D360E300D5BFFFF360E0E300E360E300E360E300D360E36
%30300D0E0D360E0E0D0E0D0E0E360E360D360E360E0E30300D360E0E0D0E
%0E0E0D360E300E360E300E360E300E360E0D0E0D0E0D0E0D0E0D0E0D0E0D
%0E0D0E0D362F3636840DFD055A308436365A36075A0D360D5A300E365A5A
%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E30FFFF5A070E0D0E0D0E0D0E0D
%0E0D0E0D3630363685305A365A5A5A0D8536365A360D5A0D360D5A0D3636
%5A5A365A5A300E0D360D0E0D0E0D0E0D0E0D0E0D0E0D0E300E0E0D300E0E
%0D300E0E0D300E0E0D0E5A855A8530857E85A93684A9365A848584368436
%5A3684615AAF5A85300E0D300E0E0D300E0E0D300E0E0D300D5AFFFF360E
%0D300E0E0D300E0E0D300E0E5A855A6030858485845A8485305AA9857E36
%845A5A36A95A5AAF5A60845A368536365A0E0D300E0E0D300E0E0D300E0E
%0D0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E07855A5A2F0D5AA936600D847E
%0D0DA95A365AA95A5A0D847EFD045A300D0E0D0E0D0E0D0E0D0E0D0E0D0E
%0D0E30FFFF5A070E0D0E0D0E0D0E0D0E0D0E0D845A5A2F075AA9365A0D85
%7E070DAF5A305AA97E3607855A5A365A8485070D5A847E5A070E0D0E0D0E
%0D0E0D0E0D0E0D0E300D0E0D300D0E0D300D0E0D300D0E0D305A605A8584
%855A0E5A365A8584855A360E850D858485A8A90E5A5A85300E0D300D0E0D
%300D0E0D300D0E0D300D5AFFFF360E0D300D0E0D300D0E0D300D0E5A855A
%857E855A0E5A365A857E855A300D850E858485A9850D615A855A855A855A
%855A0E0D300D0E0D300D0E0D300D0E0D0D0E0D0E0D0E0D0E0D0E0D0E0D0E
%0D0E0D0E0D0E0D360D0E0D0E0D0E07360D0E0D0E0D0E0D302F5A0D0E0D0E
%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E36FFFF5A070E0D0E0D0E0D0E
%0D0E0D0E0D0E0D0E0D360D0E0D0E0D0E0D300D0E0D0E0D0E0D302F5A0D0E
%0D0E0D0E0D360D300D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0E0D0E0D0E0D
%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D
%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E075AFFFF36
%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D
%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D
%0E0D0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E
%0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D
%070E0D0D2FFFFF36070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E
%0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D070E0D0D
%070E0D0D070E0D0D070E0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D
%0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D
%300D0E0D300D0E0D300D0E075AFFFF360E0D0E0D300D0E0D300D0E0D300D
%0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D0E0D
%300D0E0D300D0E0D300D0E0D300D0E0D300D070D070E070D070E070D070E
%070D070E070D070E070D070E070D070E070D070E070D070E070D070E070D
%070E070D070E070D070E070D070E070D070E070D2FFFFF36070E070D070E
%070D070E070D070E070D070E070D070E070D070E070D070E070D070E070D
%070E070D070E070D070E070D070E070D070E070D070E070D070E3630362F
%3630362F3630362F3630362F3630362F3630362F3630362F3630362F3630
%362F3630362F3630362F3630362F3630362F3630362F3630362F360D5AFF
%FF5A302F3630362F3630362F3630362F3630362F3630362F3630362F3630
%362F3630362F3630362F3630362F3630362F3630362F3630362F3630362F
%3630362FA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FF
%FFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFF
%A9FFFFFFA9FD07FFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FF
%FFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFF
%A9FFFFFFA9FFFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: KTRK-KG
%%IncludeFont: KTRK-RU
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Euro 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _KTRK-KG KTRK-KG
[/_KTRK-KG/KTRK-KG 0 7 0 TZ%AI3_EndEncoding TrueType
%AI55J_Tsume: None
%AI3_BeginEncoding: _KTRK-RU KTRK-RU
[/_KTRK-RU/KTRK-RU 0 7 0 TZ%AI3_EndEncoding TrueType
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (Swatch Libraries.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (Unnamed gradient 26)
(Unnamed gradient 26) 0 2 Bd
[
<
B8B9BBBCBEBFC1C2C3C5C6C8C9CBCCCECFD1D2D4D5D7D8DADCDDDFE1E3E5E7E8EAEBEDEEF0F2F4F6
F8FAFBFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
4142434445474847494B4C4E4F5052535557585A595B5C5E6061636567696B6D6F6E70727477797B
7D7F81838588878A8D8F919496999B9DA0A2A5A4A7AAACAEB1B3B5B8BABCBFC1C0C2C4C6C8CACD
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000001010202030305060708090A0C0D0E0F101213141617191A1A1C1C1D1E1F2021
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000010101010101
>
<
292828272726262525242423232222212120201F1E1E1D1D1C1C1B1B1A1A19191818171716161515
1413131212111110100F0F0E0E0D0D0C0C0B0B0A09090808070706060505040403030202010100
>
<
A3A2A1A09F9E9D9D9C9B9A99989796959493929191908F8E8D8C8B8A89888786858584838281807F
7E7D7C7B7A79797877767574737271706F6E6D6D6C6B6A69686766656463626161605F5E5D5C5B
>
<
F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2
D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAA
>
4 %_Br
[
1 0.802029 0.130983 0.005829 0 0.356863 0.666667 2 50 100 %_BS
%_1 0.802029 0.130983 0.005829 0 0.356863 0.666667 2 50 100 Bs
0.721065 0.254887 0 0 0.160784 0.639216 0.976471 2 50 0 %_BS
%_0.721065 0.254887 0 0 0.160784 0.639216 0.976471 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.580072 0.46009 0.410468 0.949004 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
1 Ap
0 O
0 J 0 j 1 w 10 M []0 d0 XR
410.7998 209.3984 m
16 209.3984 L
16 504.5293 L
410.7998 504.5293 L
410.4028 455.6387 L
410.7998 209.3984 L
Bb
1 (Unnamed gradient 26) 213.3999 504.5293 -90 295.1313 1 0 0 1 0 0 Bg
-0.000013 -295.1313 -398.7998 0.000017 412.7998 504.5293 Xm
-0.000349 -7988.3999 -398.7998 0.000017 412.8003 8492.9297 Bc
-0.000013 -295.1313 -398.7998 0.000017 412.7998 504.5293 Bm
-0.000349 -7988.3999 -398.7998 0.000017 412.7998 209.3984 Bc
f
0 BB
0 Ap
0 0 0 0 1 1 1 Xa
1 XR
227.6323 417.7104 m
227.6323 351.1221 L
272.9033 352.2964 300.7041 356.8022 301.3857 363.103 c
303.1099 379.0078 303.0308 403.5879 300.4277 414.0981 c
297.8984 424.3042 290.062 439.9136 240.1743 464.6865 c
215.4629 476.9565 197.6655 472.2266 183.0762 464.6865 c
145.772 445.4067 127.105 431.2754 123.0005 414.3862 c
119.0361 398.0664 121.1421 364.9404 121.8218 363.2642 c
122.5005 361.5864 123.5898 353.7417 191.4009 351.2471 C
191.4009 399.6714 l
227.6323 417.7104 l
f
u
*u
0 XR
119.7197 305.6973 m
116.7417 305.6973 114.2251 306.7295 112.1704 308.7939 c
110.1152 310.8579 109.0879 313.3794 109.0879 316.3574 c
109.0879 319.3169 110.1201 321.8335 112.1841 323.9072 c
114.2485 325.9805 116.7603 327.0171 119.7197 327.0171 c
122.6982 327.0171 125.2144 325.9849 127.2695 323.9209 c
129.3242 321.8564 130.3521 319.3354 130.3521 316.3574 c
130.3521 313.4072 129.3174 310.8931 127.2485 308.8149 c
125.1797 306.7363 122.6704 305.6973 119.7197 305.6973 c
f
1 D
119.7197 307.7017 m
122.0947 307.7017 124.0942 308.5586 125.7178 310.2739 c
127.3042 311.9609 128.0977 313.9956 128.0977 316.3784 c
128.0977 318.7422 127.2905 320.772 125.6763 322.4688 c
124.062 324.165 122.0762 325.0132 119.7197 325.0132 c
117.3447 325.0132 115.355 324.1694 113.75 322.4824 c
112.1445 320.7954 111.3423 318.7607 111.3423 316.3784 c
111.3423 314.0142 112.1401 311.9844 113.7358 310.2876 c
115.3687 308.5635 117.3633 307.7017 119.7197 307.7017 c
f
*U
*u
0 D
132.1611 326.6274 m
144.1294 326.6274 L
144.1294 324.6235 L
134.332 324.6235 L
134.332 318.7231 L
138.0615 318.7231 L
140.186 318.7231 141.9443 318.2222 143.3359 317.2202 c
144.8945 316.0977 145.6738 314.5112 145.6738 312.4609 c
145.6738 310.5034 144.876 308.9307 143.2803 307.7432 c
141.833 306.667 140.0933 306.1289 138.0615 306.1289 c
132.1611 306.1289 l
132.1611 326.6274 L
f
1 D
134.332 316.7192 m
134.332 308.1328 L
138.4233 308.1328 L
139.8892 308.1328 141.0723 308.4795 141.9722 309.1733 c
142.9556 309.9404 143.4473 311.0361 143.4473 312.4604 c
143.4473 313.8384 142.9414 314.9116 141.9302 315.6792 c
141.0117 316.3726 139.8428 316.7192 138.4233 316.7192 c
134.332 316.7192 L
f
*U
*u
0 D
147.4971 306.1289 m
147.4971 326.6274 L
149.668 326.6274 L
149.668 308.1191 L
157.2661 308.1191 L
157.2661 326.6274 L
159.4375 326.6274 L
159.4375 308.1191 L
167.0493 308.1191 L
167.0493 326.6274 L
169.2065 326.6274 L
169.2065 306.1289 l
147.4971 306.1289 L
f
168.2183 306.1289 m
169.123 308.1191 L
170.3477 308.1191 L
170.3477 301.8843 L
168.2183 301.8843 l
168.2183 306.1289 L
f
*U
*u
172.769 326.6274 m
184.3057 326.6274 L
184.3057 324.6235 L
174.9399 324.6235 L
174.9399 317.4707 L
183.9995 317.4707 L
183.9995 315.4668 L
174.9399 315.4668 L
174.9399 308.1328 L
184.3057 308.1328 L
184.3057 306.1289 L
172.769 306.1289 l
172.769 326.6274 L
f
*U
*u
203.2734 311.3477 m
205.667 311.3477 L
205.0176 309.6865 203.7607 308.314 201.896 307.2285 c
200.1333 306.2075 198.3193 305.6973 196.4546 305.6973 c
193.4858 305.6973 190.9717 306.7319 188.9121 308.8008 c
186.8525 310.8696 185.8228 313.3887 185.8228 316.3574 c
185.8228 319.3169 186.8545 321.8335 188.9189 323.9072 c
190.9829 325.9805 193.4951 327.0171 196.4546 327.0171 c
198.4121 327.0171 200.2954 326.479 202.1045 325.4028 c
204.062 324.2432 205.3052 322.7773 205.834 321.0054 c
203.4961 321.0054 L
202.8652 322.1519 201.8633 323.1133 200.4902 323.8901 c
199.1357 324.6387 197.7905 325.0132 196.4546 325.0132 c
194.0796 325.0132 192.0894 324.1694 190.4844 322.4824 c
188.8794 320.7954 188.0771 318.7607 188.0771 316.3784 c
188.0771 314.0142 188.875 311.9844 190.4707 310.2876 c
192.1035 308.5635 194.0981 307.7017 196.4546 307.7017 c
197.7813 307.7017 199.0801 308.0215 200.3511 308.6616 c
201.7241 309.3481 202.6982 310.2432 203.2734 311.3477 c
f
*U
*u
211.3311 306.1289 m
211.3311 324.6235 L
206.6831 324.6235 L
206.6831 326.6274 L
218.2061 326.6274 L
218.2061 324.6235 L
213.5576 324.6235 L
213.5576 306.1289 l
211.3311 306.1289 L
f
*U
*u
219.5137 306.1289 m
219.5137 326.6274 L
226.0684 326.6274 L
227.5527 326.6274 228.833 326.1729 229.9092 325.2637 c
231.0503 324.2988 231.6211 323.0879 231.6211 321.6318 c
231.6211 319.5444 230.7485 318.0225 229.0044 317.0669 c
230.0347 316.77 230.918 316.1255 231.6558 315.1328 c
232.3931 314.1401 232.7622 313.1055 232.7622 312.0293 c
232.7622 310.3501 232.1221 308.9351 230.8418 307.7852 c
229.6074 306.6807 228.1416 306.1289 226.4438 306.1289 c
219.5137 306.1289 L
f
1 D
221.6846 324.6235 m
221.6846 317.958 L
225.9849 317.958 L
226.9126 317.958 227.7104 318.2778 228.3784 318.918 c
229.0464 319.5581 229.3804 320.3374 229.3804 321.2559 c
229.3804 322.2114 229.0581 323.0117 228.4131 323.6567 c
227.7681 324.3013 226.959 324.6235 225.9849 324.6235 c
221.6846 324.6235 L
f
221.6846 315.9536 m
221.6846 308.1328 L
226.583 308.1328 L
227.6592 308.1328 228.5825 308.5142 229.3525 309.2769 c
230.1226 310.0396 230.5078 310.957 230.5078 312.0293 c
230.5078 313.1387 230.1294 314.0703 229.3735 314.8237 c
228.6172 315.5771 227.687 315.9536 226.583 315.9536 c
221.6846 315.9536 L
f
*U
*u
0 D
234.6128 326.6274 m
246.1494 326.6274 L
246.1494 324.6235 L
236.7837 324.6235 L
236.7837 317.4707 L
245.8433 317.4707 L
245.8433 315.4668 L
236.7837 315.4668 L
236.7837 308.1328 L
246.1494 308.1328 L
246.1494 306.1289 L
234.6128 306.1289 l
234.6128 326.6274 L
f
*U
*u
248.0977 306.1289 m
248.0977 326.6274 L
250.2686 326.6274 L
250.2686 317.7632 L
260.9287 317.7632 L
260.9287 326.6274 L
263.0854 326.6274 L
263.0854 306.1289 L
260.9287 306.1289 L
260.9287 315.7588 L
250.2686 315.7588 L
250.2686 306.1289 l
248.0977 306.1289 L
f
*U
*u
265.3682 306.1289 m
265.3682 326.6274 L
267.5391 326.6274 L
267.5391 317.7632 L
278.1992 317.7632 L
278.1992 326.6274 L
280.356 326.6274 L
280.356 306.1289 L
278.1992 306.1289 L
278.1992 315.7588 L
267.5391 315.7588 L
267.5391 306.1289 l
265.3682 306.1289 L
f
*U
*u
290.3887 326.6274 m
292.7832 326.6274 L
301.6748 306.1289 L
299.248 306.1289 L
296.2905 313.0869 L
286.9121 313.0869 L
283.9243 306.1289 L
281.4971 306.1289 l
290.3887 326.6274 L
f
1 D
291.5859 324.5962 m
287.7056 315.0908 L
295.4663 315.0908 l
291.5859 324.5962 L
f
*U
*u
0 D
315.5088 306.1289 m
313.3516 306.1289 L
313.3516 324.6235 L
309.3018 324.6235 L
307.9937 324.6235 306.8921 324.1943 305.9966 323.3364 c
305.1016 322.478 304.6538 321.3999 304.6538 320.1011 c
304.6538 318.8486 305.1201 317.7886 306.0522 316.9209 c
306.9849 316.0532 308.0864 315.6196 309.3574 315.6196 c
312.5444 315.6196 L
305.5723 306.1289 L
302.9644 306.1289 L
308.7344 313.7949 L
307.0171 313.7949 305.5317 314.4326 304.2788 315.7085 c
303.0259 316.9844 302.3994 318.4854 302.3994 320.2114 c
302.3994 321.9834 303.0259 323.4956 304.2783 324.7485 c
305.5308 326.001 307.0425 326.6274 308.8149 326.6274 c
315.5088 326.6274 l
315.5088 306.1289 L
f
*U
*u
46.4087 276.6787 m
46.4087 295.1738 L
41.7607 295.1738 L
41.7607 297.1772 L
53.2837 297.1772 L
53.2837 295.1738 L
48.6353 295.1738 L
48.6353 276.6787 l
46.4087 276.6787 L
f
*U
*u
54.5918 297.1772 m
66.1284 297.1772 L
66.1284 295.1738 L
56.7627 295.1738 L
56.7627 288.0205 L
65.8223 288.0205 L
65.8223 286.0166 L
56.7627 286.0166 L
56.7627 278.6826 L
66.1284 278.6826 L
66.1284 276.6787 L
54.5918 276.6787 l
54.5918 297.1772 L
f
*U
*u
75.8271 297.1772 m
78.3052 297.1772 L
86.9478 276.6787 L
84.5313 276.6787 L
77.0801 294.9248 L
69.3628 276.6787 L
66.9355 276.6787 l
75.8271 297.1772 L
f
*U
*u
88.0879 297.1772 m
99.6245 297.1772 L
99.6245 295.1738 L
90.2588 295.1738 L
90.2588 288.0205 L
99.3184 288.0205 L
99.3184 286.0166 L
90.2588 286.0166 L
90.2588 278.6826 L
99.6245 278.6826 L
99.6245 276.6787 L
88.0879 276.6787 l
88.0879 297.1772 L
f
*U
*u
101.5732 276.6787 m
101.5732 297.1772 L
107.9331 297.1772 L
109.6309 297.1772 111.0757 296.5791 112.2681 295.3818 c
113.46 294.1855 114.0562 292.7383 114.0562 291.04 c
114.0562 289.333 113.4624 287.8809 112.2749 286.6846 c
111.0874 285.4873 109.6401 284.8896 107.9331 284.8896 c
103.7441 284.8896 L
103.7441 276.6787 l
101.5732 276.6787 L
f
1 D
103.7441 295.1738 m
103.7441 286.8936 L
107.6406 286.8936 L
108.8096 286.8936 109.7954 287.2939 110.5981 288.0947 c
111.4004 288.8955 111.8018 289.8799 111.8018 291.0469 c
111.8018 292.2236 111.4028 293.2051 110.605 293.9922 c
109.8071 294.7793 108.8188 295.1738 107.6406 295.1738 c
103.7441 295.1738 L
f
*U
*u
0 D
123.6016 297.1772 m
125.9961 297.1772 L
134.8877 276.6787 L
132.4609 276.6787 L
129.5034 283.6367 L
120.125 283.6367 L
117.1372 276.6787 L
114.71 276.6787 l
123.6016 297.1772 L
f
1 D
124.7988 295.1465 m
120.9185 285.6406 L
128.6792 285.6406 l
124.7988 295.1465 L
f
*U
*u
0 D
143.9619 297.1772 m
146.439 297.1772 L
154.0518 278.6826 L
155.0811 278.6826 L
155.0811 276.6787 L
135.0698 276.6787 L
135.0698 278.6826 L
136.0718 278.6826 l
143.9619 297.1772 L
f
1 D
151.689 278.6826 m
145.2119 294.9307 L
138.4619 278.6826 l
151.689 278.6826 L
f
*U
*u
0 D
170.584 276.6787 m
170.584 294.1436 L
158.5806 276.6787 L
156.4175 276.6787 L
156.4175 297.1772 L
158.5884 297.1772 L
158.5884 279.8936 L
170.1528 297.1772 L
172.7412 297.1772 L
172.7412 276.6787 l
170.584 276.6787 L
f
*U
*u
185.1401 276.2471 m
182.1621 276.2471 179.6455 277.2793 177.5908 279.3438 c
175.5356 281.4082 174.5083 283.9287 174.5083 286.9072 c
174.5083 289.8662 175.5405 292.3828 177.6045 294.457 c
179.6689 296.5303 182.1807 297.5669 185.1401 297.5669 c
188.1187 297.5669 190.6348 296.5352 192.6899 294.4707 c
194.7446 292.4063 195.7725 289.8857 195.7725 286.9072 c
195.7725 283.957 194.7378 281.4424 192.6689 279.3643 c
190.6001 277.2861 188.0908 276.2471 185.1401 276.2471 c
f
1 D
185.1401 278.251 m
187.5151 278.251 189.5146 279.1084 191.1382 280.8232 c
192.7246 282.5107 193.5181 284.5459 193.5181 286.9277 c
193.5181 289.292 192.7109 291.3223 191.0967 293.0186 c
189.4824 294.7148 187.4966 295.5635 185.1401 295.5635 c
182.7651 295.5635 180.7754 294.7197 179.1704 293.0322 c
177.5649 291.3447 176.7627 289.3105 176.7627 286.9277 c
176.7627 284.5645 177.5605 282.5342 179.1563 280.8379 c
180.7891 279.1133 182.7837 278.251 185.1401 278.251 c
f
*U
*u
0 D
197.5815 276.6787 m
197.5815 297.1772 L
204.1362 297.1772 L
205.6206 297.1772 206.9009 296.7227 207.9771 295.8135 c
209.1182 294.8486 209.689 293.6377 209.689 292.1816 c
209.689 290.0938 208.8164 288.5723 207.0723 287.6172 c
208.1025 287.3203 208.9858 286.6748 209.7236 285.6826 c
210.4609 284.6895 210.8301 283.6553 210.8301 282.5791 c
210.8301 280.9004 210.1899 279.4854 208.9097 278.335 c
207.6753 277.2305 206.2095 276.6787 204.5117 276.6787 c
197.5815 276.6787 L
f
1 D
199.7524 295.1738 m
199.7524 288.5078 L
204.0527 288.5078 L
204.9805 288.5078 205.7783 288.8281 206.4463 289.4678 c
207.1143 290.1084 207.4482 290.8877 207.4482 291.8057 c
207.4482 292.7607 207.126 293.5615 206.481 294.2061 c
205.8359 294.8506 205.0269 295.1738 204.0527 295.1738 c
199.7524 295.1738 L
f
199.7524 286.5039 m
199.7524 278.6826 L
204.6509 278.6826 L
205.7271 278.6826 206.6504 279.0635 207.4204 279.8262 c
208.1904 280.5898 208.5757 281.5068 208.5757 282.5791 c
208.5757 283.6885 208.1973 284.6201 207.4414 285.373 c
206.6851 286.127 205.7549 286.5039 204.6509 286.5039 c
199.7524 286.5039 L
f
*U
*u
0 D
212.6807 297.1772 m
224.2173 297.1772 L
224.2173 295.1738 L
214.8516 295.1738 L
214.8516 288.0205 L
223.9111 288.0205 L
223.9111 286.0166 L
214.8516 286.0166 L
214.8516 278.6826 L
224.2173 278.6826 L
224.2173 276.6787 L
212.6807 276.6787 l
212.6807 297.1772 L
f
*U
*u
226.1655 276.6787 m
226.1655 297.1772 L
228.3364 297.1772 L
228.3364 278.6689 L
235.9346 278.6689 L
235.9346 297.1772 L
238.106 297.1772 L
238.106 278.6689 L
245.7178 278.6689 L
245.7178 297.1772 L
247.875 297.1772 L
247.875 276.6787 l
226.1655 276.6787 L
f
246.8867 276.6787 m
247.7915 278.6689 L
249.0161 278.6689 L
249.0161 272.4346 L
246.8867 272.4346 l
246.8867 276.6787 L
f
*U
*u
259.1885 297.1772 m
261.583 297.1772 L
270.4746 276.6787 L
268.0479 276.6787 L
265.0903 283.6367 L
255.7119 283.6367 L
252.7241 276.6787 L
250.2969 276.6787 l
259.1885 297.1772 L
f
1 D
260.3857 295.1465 m
256.5054 285.6406 L
264.2661 285.6406 l
260.3857 295.1465 L
f
*U
*u
0 D
275.29 276.6787 m
275.29 295.1738 L
270.6421 295.1738 L
270.6421 297.1772 L
282.165 297.1772 L
282.165 295.1738 L
277.5166 295.1738 L
277.5166 276.6787 l
275.29 276.6787 L
f
*U
*u
283.4731 297.1772 m
295.0098 297.1772 L
295.0098 295.1738 L
285.644 295.1738 L
285.644 288.0205 L
294.7036 288.0205 L
294.7036 286.0166 L
285.644 286.0166 L
285.644 278.6826 L
295.0098 278.6826 L
295.0098 276.6787 L
283.4731 276.6787 l
283.4731 297.1772 L
f
*U
*u
304.7085 297.1772 m
307.1865 297.1772 L
315.8291 276.6787 L
313.4126 276.6787 L
305.9614 294.9248 L
298.2441 276.6787 L
295.8169 276.6787 l
304.7085 297.1772 L
f
*U
*u
316.9839 276.6787 m
316.9839 297.1772 L
319.1548 297.1772 L
319.1548 288.8838 L
323.3433 288.8838 L
325.106 288.8838 326.5952 288.2939 327.8105 287.1162 c
329.0259 285.9375 329.6338 284.4902 329.6338 282.7744 c
329.6338 281.0488 329.019 279.6016 327.7896 278.4326 c
326.5601 277.2637 325.0781 276.6787 323.3433 276.6787 c
316.9839 276.6787 L
f
1 D
319.1548 286.8789 m
319.1548 278.6826 L
323.3433 278.6826 L
324.4658 278.6826 325.4189 279.085 326.2031 279.8916 c
326.9873 280.6973 327.3789 281.6602 327.3789 282.7813 c
327.3789 283.9199 326.9917 284.8877 326.2173 285.6846 c
325.4424 286.4814 324.4844 286.8789 323.3433 286.8789 c
319.1548 286.8789 L
f
*U
*u
0 D
332.25 276.6787 m
332.25 297.1772 L
334.4209 297.1772 L
334.4209 288.3125 L
345.0811 288.3125 L
345.0811 297.1772 L
347.2378 297.1772 L
347.2378 276.6787 L
345.0811 276.6787 L
345.0811 286.3086 L
334.4209 286.3086 L
334.4209 276.6787 l
332.25 276.6787 L
f
*U
*u
357.2705 297.1772 m
359.665 297.1772 L
368.5566 276.6787 L
366.1299 276.6787 L
363.1724 283.6367 L
353.7939 283.6367 L
350.8062 276.6787 L
348.3789 276.6787 l
357.2705 297.1772 L
f
1 D
358.4678 295.1465 m
354.5874 285.6406 L
362.3481 285.6406 l
358.4678 295.1465 L
f
*U
*u
0 D
382.3906 276.6787 m
380.2334 276.6787 L
380.2334 295.1738 L
376.1836 295.1738 L
374.8755 295.1738 373.7739 294.7441 372.8784 293.8857 c
371.9834 293.0283 371.5356 291.9492 371.5356 290.6504 c
371.5356 289.3984 372.002 288.3379 372.9341 287.4707 c
373.8667 286.6035 374.9683 286.1699 376.2393 286.1699 c
379.4263 286.1699 L
372.4541 276.6787 L
369.8462 276.6787 L
375.6162 284.3447 L
373.8989 284.3447 372.4136 284.9824 371.1606 286.2588 c
369.9077 287.5342 369.2813 289.0352 369.2813 290.7607 c
369.2813 292.5332 369.9077 294.0459 371.1602 295.2979 c
372.4126 296.5508 373.9243 297.1772 375.6968 297.1772 c
382.3906 297.1772 l
382.3906 276.6787 L
f
*U
*u
125.7803 247.2275 m
125.7803 267.7266 L
127.9512 267.7266 L
127.9512 258.0547 L
135.7305 267.7266 L
138.3384 267.7266 L
130.3652 257.9248 L
138.4307 247.2275 L
135.7305 247.2275 L
127.9512 257.749 L
127.9512 247.2275 l
125.7803 247.2275 L
f
*U
*u
149.9668 246.7959 m
146.9888 246.7959 144.4722 247.8281 142.4175 249.8926 c
140.3623 251.957 139.335 254.4775 139.335 257.4561 c
139.335 260.415 140.3672 262.9316 142.4312 265.0059 c
144.4956 267.0791 147.0073 268.1162 149.9668 268.1162 c
152.9453 268.1162 155.4614 267.084 157.5166 265.0195 c
159.5713 262.9551 160.5991 260.4346 160.5991 257.4561 c
160.5991 254.5059 159.5645 251.9912 157.4956 249.9131 c
155.4268 247.835 152.9175 246.7959 149.9668 246.7959 c
f
1 D
149.9668 248.7998 m
152.3418 248.7998 154.3413 249.6572 155.9648 251.3721 c
157.5513 253.0596 158.3447 255.0947 158.3447 257.4766 c
158.3447 259.8408 157.5376 261.8711 155.9233 263.5674 c
154.3091 265.2637 152.3232 266.1123 149.9668 266.1123 c
147.5918 266.1123 145.6021 265.2686 143.9971 263.5811 c
142.3916 261.8936 141.5894 259.8594 141.5894 257.4766 c
141.5894 255.1133 142.3872 253.083 143.9829 251.3867 c
145.6157 249.6621 147.6104 248.7998 149.9668 248.7998 c
f
*U
*u
0 D
162.4082 247.2275 m
162.4082 267.7266 L
168.7681 267.7266 L
170.4658 267.7266 171.9106 267.1279 173.103 265.9307 c
174.2949 264.7344 174.8911 263.2871 174.8911 261.5889 c
174.8911 259.8818 174.2974 258.4297 173.1099 257.2334 c
171.9224 256.0361 170.4751 255.4385 168.7681 255.4385 c
164.5791 255.4385 L
164.5791 247.2275 l
162.4082 247.2275 L
f
1 D
164.5791 265.7227 m
164.5791 257.4424 L
168.4756 257.4424 L
169.6445 257.4424 170.6304 257.8428 171.4331 258.6436 c
172.2354 259.4443 172.6367 260.4287 172.6367 261.5957 c
172.6367 262.7725 172.2378 263.7539 171.4399 264.541 c
170.6421 265.3281 169.6538 265.7227 168.4756 265.7227 c
164.5791 265.7227 L
f
*U
*u
0 D
176.7002 247.2275 m
176.7002 267.7266 L
191.2285 267.7266 L
191.2285 247.2275 L
189.0718 247.2275 L
189.0718 265.7227 L
178.8711 265.7227 L
178.8711 247.2275 l
176.7002 247.2275 L
f
*U
*u
203.6558 246.7959 m
200.6777 246.7959 198.1611 247.8281 196.1064 249.8926 c
194.0513 251.957 193.0239 254.4775 193.0239 257.4561 c
193.0239 260.415 194.0562 262.9316 196.1201 265.0059 c
198.1846 267.0791 200.6963 268.1162 203.6558 268.1162 c
206.6343 268.1162 209.1504 267.084 211.2056 265.0195 c
213.2603 262.9551 214.2881 260.4346 214.2881 257.4561 c
214.2881 254.5059 213.2534 251.9912 211.1846 249.9131 c
209.1157 247.835 206.6064 246.7959 203.6558 246.7959 c
f
1 D
203.6558 248.7998 m
206.0308 248.7998 208.0303 249.6572 209.6538 251.3721 c
211.2402 253.0596 212.0337 255.0947 212.0337 257.4766 c
212.0337 259.8408 211.2266 261.8711 209.6123 263.5674 c
207.998 265.2637 206.0122 266.1123 203.6558 266.1123 c
201.2808 266.1123 199.291 265.2686 197.686 263.5811 c
196.0806 261.8936 195.2783 259.8594 195.2783 257.4766 c
195.2783 255.1133 196.0762 253.083 197.6719 251.3867 c
199.3047 249.6621 201.2993 248.7998 203.6558 248.7998 c
f
*U
*u
0 D
216.0972 247.2275 m
216.0972 267.7266 L
222.457 267.7266 L
224.1548 267.7266 225.5996 267.1279 226.792 265.9307 c
227.9839 264.7344 228.5801 263.2871 228.5801 261.5889 c
228.5801 259.8818 227.9863 258.4297 226.7988 257.2334 c
225.6113 256.0361 224.1641 255.4385 222.457 255.4385 c
218.2681 255.4385 L
218.2681 247.2275 l
216.0972 247.2275 L
f
1 D
218.2681 265.7227 m
218.2681 257.4424 L
222.1646 257.4424 L
223.3335 257.4424 224.3193 257.8428 225.1221 258.6436 c
225.9243 259.4443 226.3257 260.4287 226.3257 261.5957 c
226.3257 262.7725 225.9268 263.7539 225.1289 264.541 c
224.3311 265.3281 223.3428 265.7227 222.1646 265.7227 c
218.2681 265.7227 L
f
*U
*u
0 D
238.126 267.7266 m
240.5205 267.7266 L
249.4121 247.2275 L
246.9854 247.2275 L
244.0278 254.1855 L
234.6494 254.1855 L
231.6616 247.2275 L
229.2344 247.2275 l
238.126 267.7266 L
f
1 D
239.3232 265.6953 m
235.4429 256.1895 L
243.2036 256.1895 l
239.3232 265.6953 L
f
*U
*u
0 D
250.5537 267.7266 m
252.7246 267.7266 L
252.7246 249.2314 L
262.9253 249.2314 L
262.9253 267.7266 L
265.0825 267.7266 L
265.0825 249.2314 L
266.3071 249.2314 L
266.3071 242.9834 L
264.1919 242.9834 L
264.1919 247.2275 L
250.5537 247.2275 l
250.5537 267.7266 L
f
*U
*u
282.1997 247.2275 m
282.1997 264.6924 L
270.1963 247.2275 L
268.0332 247.2275 L
268.0332 267.7266 L
270.2041 267.7266 L
270.2041 250.4424 L
281.7686 267.7266 L
284.3569 267.7266 L
284.3569 247.2275 l
282.1997 247.2275 L
f
*U
*u
299.3447 247.2275 m
297.1875 247.2275 L
297.1875 265.7227 L
293.1377 265.7227 L
291.8296 265.7227 290.728 265.293 289.8325 264.4346 c
288.9375 263.5771 288.4897 262.498 288.4897 261.1992 c
288.4897 259.9473 288.9561 258.8867 289.8882 258.0195 c
290.8208 257.1523 291.9224 256.7188 293.1934 256.7188 c
296.3804 256.7188 L
289.4082 247.2275 L
286.8003 247.2275 L
292.5703 254.8936 L
290.853 254.8936 289.3677 255.5313 288.1147 256.8076 c
286.8618 258.083 286.2354 259.584 286.2354 261.3096 c
286.2354 263.082 286.8618 264.5947 288.1143 265.8467 c
289.3667 267.0996 290.8784 267.7266 292.6509 267.7266 c
299.3447 267.7266 l
299.3447 247.2275 L
f
*U
U

1 Ap
822 209.3984 m
427.2002 209.3984 L
427.2002 504.5283 L
822 504.5283 L
821.6016 455.6387 L
822 209.3984 L
Bb
1 (Unnamed gradient 26) 624.5996 504.5283 -90 295.1304 1 0 0 1 0 0 Bg
-0.000013 -295.1304 -398.7998 0.000017 824 504.5283 Xm
-0.000367 -8399.5996 -398.7998 0.000017 824 8904.1279 Bc
-0.000013 -295.1304 -398.7998 0.000017 824 504.5283 Bm
-0.000367 -8399.5996 -398.7998 0.000017 824 209.3984 Bc
f
0 BB
0 Ap
0 0 0 0 1 1 1 Xa
1 XR
638.124 418.0615 m
638.124 351.4731 L
683.3955 352.6479 711.1963 357.1528 711.8789 363.4536 c
713.6025 379.3584 713.5234 403.9385 710.9199 414.4482 c
708.3896 424.6553 700.5547 440.2642 650.667 465.0371 c
625.9541 477.3076 608.1592 472.5771 593.5693 465.0371 c
556.2637 445.7573 537.5977 431.625 533.4941 414.7358 c
529.5283 398.4165 531.6338 365.2905 532.3145 363.6152 c
532.9932 361.937 534.082 354.0928 601.8936 351.5972 C
601.8936 400.0225 l
638.124 418.0615 l
f
u
*u
0 XR
557.3203 306.4795 m
557.3203 326.978 L
559.4912 326.978 L
559.4912 317.3062 L
567.2705 326.978 L
569.8779 326.978 L
561.9043 317.1768 L
569.9697 306.4795 L
567.2695 306.4795 L
559.4912 317.0005 L
559.4912 306.4795 l
557.3203 306.4795 L
f
*U
*u
581.5059 306.0479 m
578.5283 306.0479 576.0117 307.0801 573.9561 309.1445 c
571.9014 311.2085 570.874 313.73 570.874 316.708 c
570.874 319.6675 571.9063 322.1841 573.9707 324.2578 c
576.0342 326.3311 578.5469 327.3677 581.5059 327.3677 c
584.4844 327.3677 587.001 326.3354 589.0557 324.2715 c
591.1104 322.207 592.1377 319.686 592.1377 316.708 c
592.1377 313.7578 591.1035 311.2437 589.0352 309.1655 c
586.9658 307.0869 584.4561 306.0479 581.5059 306.0479 c
f
1 D
581.5059 308.0522 m
583.8809 308.0522 585.8809 308.9092 587.5039 310.6245 c
589.0908 312.3115 589.8838 314.3462 589.8838 316.729 c
589.8838 319.0928 589.0762 321.1226 587.4619 322.8193 c
585.8477 324.5156 583.8623 325.3638 581.5059 325.3638 c
579.1309 325.3638 577.1406 324.52 575.5361 322.833 c
573.9307 321.146 573.1289 319.1113 573.1289 316.729 c
573.1289 314.3647 573.9268 312.335 575.5225 310.6382 c
577.1553 308.9141 579.1494 308.0522 581.5059 308.0522 c
f
*U
*u
0 D
604.0508 306.0479 m
601.0732 306.0479 598.5566 307.0801 596.501 309.1445 c
594.4463 311.2085 593.4189 313.73 593.4189 316.708 c
593.4189 319.6675 594.4512 322.1841 596.5156 324.2578 c
598.5791 326.3311 601.0918 327.3677 604.0508 327.3677 c
607.0293 327.3677 609.5459 326.3354 611.6006 324.2715 c
613.6553 322.207 614.6826 319.686 614.6826 316.708 c
614.6826 313.7578 613.6484 311.2437 611.5801 309.1655 c
609.5107 307.0869 607.001 306.0479 604.0508 306.0479 c
f
1 D
604.0508 308.0522 m
606.4258 308.0522 608.4258 308.9092 610.0488 310.6245 c
611.6357 312.3115 612.4287 314.3462 612.4287 316.729 c
612.4287 319.0928 611.6211 321.1226 610.0068 322.8193 c
608.3926 324.5156 606.4072 325.3638 604.0508 325.3638 c
601.6758 325.3638 599.6855 324.52 598.0811 322.833 c
596.4756 321.146 595.6738 319.1113 595.6738 316.729 c
595.6738 314.3647 596.4717 312.335 598.0674 310.6382 c
599.7002 308.9141 601.6943 308.0522 604.0508 308.0522 c
f
*U
*u
0 D
616.4922 306.4795 m
616.4922 326.978 L
619.8027 326.978 L
627.1592 308.8008 L
634.501 326.978 L
637.8115 326.978 L
637.8115 306.4795 L
635.6406 306.4795 L
635.6406 324.5151 L
628.2373 306.4795 L
626.0664 306.4795 L
618.6631 324.5142 L
618.6631 306.4795 l
616.4922 306.4795 L
f
*U
*u
648.0264 326.978 m
650.5039 326.978 L
658.1162 308.4834 L
659.1455 308.4834 L
659.1455 306.4795 L
639.1338 306.4795 L
639.1338 308.4834 L
640.1357 308.4834 l
648.0264 326.978 L
f
1 D
655.7529 308.4834 m
649.2764 324.7314 L
642.5264 308.4834 l
655.7529 308.4834 L
f
*U
*u
0 D
664.2627 306.4795 m
667.1484 312.8652 L
659.3398 326.978 L
661.7734 326.978 L
668.3193 315.1743 L
673.2744 326.978 L
675.7334 326.978 L
666.8125 306.4795 l
664.2627 306.4795 L
f
*U
*u
676.9727 306.4795 m
676.9727 326.978 L
679.1436 326.978 L
679.1436 317.3062 L
686.9229 326.978 L
689.5303 326.978 L
681.5566 317.1768 L
689.6221 306.4795 L
686.9219 306.4795 L
679.1436 317.0005 L
679.1436 306.4795 l
676.9727 306.4795 L
f
*U
*u
512.9551 277.0293 m
512.9551 295.5244 L
508.3066 295.5244 L
508.3066 297.5278 L
519.8291 297.5278 L
519.8291 295.5244 L
515.1816 295.5244 L
515.1816 277.0293 l
512.9551 277.0293 L
f
*U
*u
521.1377 297.5278 m
532.6738 297.5278 L
532.6738 295.5244 L
523.3086 295.5244 L
523.3086 288.3711 L
532.3682 288.3711 L
532.3682 286.3672 L
523.3086 286.3672 L
523.3086 279.0332 L
532.6738 279.0332 L
532.6738 277.0293 L
521.1377 277.0293 l
521.1377 297.5278 L
f
*U
*u
542.373 297.5278 m
544.8506 297.5278 L
553.4932 277.0293 L
551.0771 277.0293 L
543.626 295.2754 L
535.9082 277.0293 L
533.4814 277.0293 l
542.373 297.5278 L
f
*U
*u
554.6348 297.5278 m
566.1709 297.5278 L
566.1709 295.5244 L
556.8057 295.5244 L
556.8057 288.3711 L
565.8652 288.3711 L
565.8652 286.3672 L
556.8057 286.3672 L
556.8057 279.0332 L
566.1709 279.0332 L
566.1709 277.0293 L
554.6348 277.0293 l
554.6348 297.5278 L
f
*U
*u
568.1191 277.0293 m
568.1191 297.5278 L
574.4785 297.5278 L
576.1758 297.5278 577.6211 296.9297 578.8135 295.7324 c
580.0059 294.5361 580.6016 293.0889 580.6016 291.3906 c
580.6016 289.6836 580.0078 288.2314 578.8203 287.0352 c
577.6328 285.8379 576.1855 285.2402 574.4785 285.2402 c
570.29 285.2402 L
570.29 277.0293 l
568.1191 277.0293 L
f
1 D
570.29 295.5244 m
570.29 287.2441 L
574.1865 287.2441 L
575.3555 287.2441 576.3408 287.6445 577.1436 288.4453 c
577.9453 289.2461 578.3467 290.2305 578.3467 291.3975 c
578.3467 292.5742 577.9482 293.5557 577.1504 294.3428 c
576.3525 295.1299 575.3643 295.5244 574.1865 295.5244 c
570.29 295.5244 L
f
*U
*u
0 D
590.1475 297.5278 m
592.542 297.5278 L
601.4336 277.0293 L
599.0068 277.0293 L
596.0488 283.9873 L
586.6709 283.9873 L
583.6826 277.0293 L
581.2559 277.0293 l
590.1475 297.5278 L
f
1 D
591.3447 295.4971 m
587.4639 285.9912 L
595.2256 285.9912 l
591.3447 295.4971 L
f
*U
*u
0 D
610.5078 297.5278 m
612.9854 297.5278 L
620.5977 279.0332 L
621.627 279.0332 L
621.627 277.0293 L
601.6152 277.0293 L
601.6152 279.0332 L
602.6172 279.0332 l
610.5078 297.5278 L
f
1 D
618.2344 279.0332 m
611.7578 295.2813 L
605.0078 279.0332 l
618.2344 279.0332 L
f
*U
*u
0 D
637.1299 277.0293 m
637.1299 294.4941 L
625.126 277.0293 L
622.9629 277.0293 L
622.9629 297.5278 L
625.1338 297.5278 L
625.1338 280.2441 L
636.6982 297.5278 L
639.2861 297.5278 L
639.2861 277.0293 l
637.1299 277.0293 L
f
*U
*u
651.6865 276.5977 m
648.709 276.5977 646.1924 277.6299 644.1367 279.6943 c
642.082 281.7588 641.0547 284.2793 641.0547 287.2578 c
641.0547 290.2168 642.0869 292.7334 644.1514 294.8076 c
646.2148 296.8809 648.7275 297.9175 651.6865 297.9175 c
654.665 297.9175 657.1816 296.8848 659.2363 294.8213 c
661.291 292.7568 662.3184 290.2363 662.3184 287.2578 c
662.3184 284.3076 661.2842 281.793 659.2158 279.7148 c
657.1465 277.6367 654.6367 276.5977 651.6865 276.5977 c
f
1 D
651.6865 278.6016 m
654.0615 278.6016 656.0615 279.459 657.6846 281.1738 c
659.2715 282.8613 660.0645 284.8965 660.0645 287.2783 c
660.0645 289.6426 659.2568 291.6729 657.6426 293.3691 c
656.0283 295.0654 654.043 295.9141 651.6865 295.9141 c
649.3115 295.9141 647.3213 295.0703 645.7168 293.3828 c
644.1113 291.6953 643.3096 289.6611 643.3096 287.2783 c
643.3096 284.915 644.1074 282.8848 645.7031 281.1885 c
647.3359 279.4639 649.3301 278.6016 651.6865 278.6016 c
f
*U
*u
0 D
664.1279 297.5278 m
676.0957 297.5278 L
676.0957 295.5244 L
666.2988 295.5244 L
666.2988 289.624 L
670.0283 289.624 L
672.1523 289.624 673.9102 289.123 675.3027 288.1201 c
676.8613 286.998 677.6406 285.4111 677.6406 283.3613 c
677.6406 281.4033 676.8418 279.8311 675.2471 278.6436 c
673.7988 277.5674 672.0596 277.0293 670.0283 277.0293 c
664.1279 277.0293 l
664.1279 297.5278 L
f
1 D
666.2988 287.6191 m
666.2988 279.0332 L
670.3896 279.0332 L
671.8555 279.0332 673.0381 279.3799 673.9385 280.0732 c
674.9219 280.8408 675.4141 281.9365 675.4141 283.3613 c
675.4141 284.7393 674.9082 285.8115 673.8965 286.5791 c
672.9785 287.2725 671.8096 287.6191 670.3896 287.6191 c
666.2988 287.6191 L
f
*U
*u
0 D
679.4639 297.5278 m
691 297.5278 L
691 295.5244 L
681.6348 295.5244 L
681.6348 288.3711 L
690.6943 288.3711 L
690.6943 286.3672 L
681.6348 286.3672 L
681.6348 279.0332 L
691 279.0332 L
691 277.0293 L
679.4639 277.0293 l
679.4639 297.5278 L
f
*U
*u
692.9482 277.0293 m
692.9482 297.5278 L
699.3076 297.5278 L
701.0049 297.5278 702.4502 296.9297 703.6426 295.7324 c
704.835 294.5361 705.4307 293.0889 705.4307 291.3906 c
705.4307 289.6836 704.8369 288.2314 703.6494 287.0352 c
702.4619 285.8379 701.0146 285.2402 699.3076 285.2402 c
695.1191 285.2402 L
695.1191 277.0293 l
692.9482 277.0293 L
f
1 D
695.1191 295.5244 m
695.1191 287.2441 L
699.0156 287.2441 L
700.1846 287.2441 701.1699 287.6445 701.9727 288.4453 c
702.7744 289.2461 703.1758 290.2305 703.1758 291.3975 c
703.1758 292.5742 702.7773 293.5557 701.9795 294.3428 c
701.1816 295.1299 700.1934 295.5244 699.0156 295.5244 c
695.1191 295.5244 L
f
*U
*u
0 D
712.9873 277.0293 m
712.9873 284.0713 L
706.085 297.5278 L
708.6182 297.5278 L
714.0586 286.0889 L
719.5146 297.5278 L
722.0469 297.5278 L
715.1445 284.0713 L
715.1445 277.0293 l
712.9873 277.0293 L
f
*U
*u
728.9219 277.0293 m
728.9219 284.0713 L
722.0195 297.5278 L
724.5527 297.5278 L
729.9932 286.0889 L
735.4492 297.5278 L
737.9814 297.5278 L
731.0791 284.0713 L
731.0791 277.0293 l
728.9219 277.0293 L
f
*U
*u
515.8916 247.5781 m
515.8916 268.0771 L
518.0625 268.0771 L
518.0625 258.4053 L
525.8418 268.0771 L
528.4492 268.0771 L
520.4756 258.2754 L
528.541 247.5781 L
525.8408 247.5781 L
518.0625 258.0996 L
518.0625 247.5781 l
515.8916 247.5781 L
f
*U
*u
540.0771 247.1465 m
537.0996 247.1465 534.583 248.1787 532.5273 250.2432 c
530.4727 252.3076 529.4453 254.8281 529.4453 257.8066 c
529.4453 260.7656 530.4775 263.2822 532.542 265.3564 c
534.6055 267.4297 537.1182 268.4668 540.0771 268.4668 c
543.0557 268.4668 545.5723 267.4346 547.627 265.3701 c
549.6816 263.3057 550.709 260.7852 550.709 257.8066 c
550.709 254.8564 549.6748 252.3418 547.6064 250.2637 c
545.5371 248.1855 543.0273 247.1465 540.0771 247.1465 c
f
1 D
540.0771 249.1504 m
542.4521 249.1504 544.4521 250.0078 546.0752 251.7227 c
547.6621 253.4102 548.4551 255.4453 548.4551 257.8271 c
548.4551 260.1914 547.6475 262.2217 546.0332 263.918 c
544.4189 265.6143 542.4336 266.4629 540.0771 266.4629 c
537.7021 266.4629 535.7119 265.6191 534.1074 263.9316 c
532.502 262.2441 531.7002 260.21 531.7002 257.8271 c
531.7002 255.4639 532.498 253.4336 534.0938 251.7373 c
535.7266 250.0127 537.7207 249.1504 540.0771 249.1504 c
f
*U
*u
0 D
552.5195 247.5781 m
552.5195 268.0771 L
558.8789 268.0771 L
560.5762 268.0771 562.0215 267.4785 563.2139 266.2813 c
564.4063 265.085 565.002 263.6377 565.002 261.9395 c
565.002 260.2324 564.4082 258.7803 563.2207 257.584 c
562.0332 256.3867 560.5859 255.7891 558.8789 255.7891 c
554.6904 255.7891 L
554.6904 247.5781 l
552.5195 247.5781 L
f
1 D
554.6904 266.0732 m
554.6904 257.793 L
558.5869 257.793 L
559.7559 257.793 560.7412 258.1934 561.5439 258.9941 c
562.3457 259.7949 562.7471 260.7793 562.7471 261.9463 c
562.7471 263.123 562.3486 264.1045 561.5508 264.8916 c
560.7529 265.6787 559.7646 266.0732 558.5869 266.0732 c
554.6904 266.0732 L
f
*U
*u
0 D
566.8115 247.5781 m
566.8115 268.0771 L
581.3398 268.0771 L
581.3398 247.5781 L
579.1826 247.5781 L
579.1826 266.0732 L
568.9824 266.0732 L
568.9824 247.5781 l
566.8115 247.5781 L
f
*U
*u
593.7666 247.1465 m
590.7891 247.1465 588.2725 248.1787 586.2168 250.2432 c
584.1621 252.3076 583.1348 254.8281 583.1348 257.8066 c
583.1348 260.7656 584.167 263.2822 586.2314 265.3564 c
588.2949 267.4297 590.8076 268.4668 593.7666 268.4668 c
596.7451 268.4668 599.2617 267.4346 601.3164 265.3701 c
603.3711 263.3057 604.3984 260.7852 604.3984 257.8066 c
604.3984 254.8564 603.3643 252.3418 601.2959 250.2637 c
599.2266 248.1855 596.7168 247.1465 593.7666 247.1465 c
f
1 D
593.7666 249.1504 m
596.1416 249.1504 598.1416 250.0078 599.7646 251.7227 c
601.3516 253.4102 602.1445 255.4453 602.1445 257.8271 c
602.1445 260.1914 601.3369 262.2217 599.7227 263.918 c
598.1084 265.6143 596.123 266.4629 593.7666 266.4629 c
591.3916 266.4629 589.4014 265.6191 587.7969 263.9316 c
586.1914 262.2441 585.3896 260.21 585.3896 257.8271 c
585.3896 255.4639 586.1875 253.4336 587.7832 251.7373 c
589.416 250.0127 591.4102 249.1504 593.7666 249.1504 c
f
*U
*u
0 D
606.208 247.5781 m
606.208 268.0771 L
612.5674 268.0771 L
614.2646 268.0771 615.71 267.4785 616.9023 266.2813 c
618.0947 265.085 618.6904 263.6377 618.6904 261.9395 c
618.6904 260.2324 618.0967 258.7803 616.9092 257.584 c
615.7217 256.3867 614.2744 255.7891 612.5674 255.7891 c
608.3789 255.7891 L
608.3789 247.5781 l
606.208 247.5781 L
f
1 D
608.3789 266.0732 m
608.3789 257.793 L
612.2754 257.793 L
613.4443 257.793 614.4297 258.1934 615.2324 258.9941 c
616.0342 259.7949 616.4355 260.7793 616.4355 261.9463 c
616.4355 263.123 616.0371 264.1045 615.2393 264.8916 c
614.4414 265.6787 613.4531 266.0732 612.2754 266.0732 c
608.3789 266.0732 L
f
*U
*u
0 D
628.2363 268.0771 m
630.6309 268.0771 L
639.5225 247.5781 L
637.0957 247.5781 L
634.1377 254.5361 L
624.7598 254.5361 L
621.7715 247.5781 L
619.3447 247.5781 l
628.2363 268.0771 L
f
1 D
629.4336 266.0459 m
625.5527 256.54 L
633.3145 256.54 l
629.4336 266.0459 L
f
*U
*u
0 D
640.665 268.0771 m
642.8359 268.0771 L
642.8359 249.582 L
653.0361 249.582 L
653.0361 268.0771 L
655.1934 268.0771 L
655.1934 249.582 L
656.418 249.582 L
656.418 243.334 L
654.3027 243.334 L
654.3027 247.5781 L
640.665 247.5781 l
640.665 268.0771 L
f
*U
*u
672.3105 247.5781 m
672.3105 265.043 L
660.3066 247.5781 L
658.1436 247.5781 L
658.1436 268.0771 L
660.3145 268.0771 L
660.3145 250.793 L
671.8789 268.0771 L
674.4668 268.0771 L
674.4668 247.5781 l
672.3105 247.5781 L
f
*U
*u
689.4551 247.5781 m
687.2979 247.5781 L
687.2979 266.0732 L
683.248 266.0732 L
681.9404 266.0732 680.8379 265.6436 679.9434 264.7852 c
679.0479 263.9277 678.6006 262.8486 678.6006 261.5498 c
678.6006 260.2979 679.0664 259.2373 679.999 258.3701 c
680.9307 257.5029 682.0322 257.0693 683.3037 257.0693 c
686.4902 257.0693 L
679.5186 247.5781 L
676.9111 247.5781 L
682.6807 255.2441 L
680.9629 255.2441 679.4785 255.8818 678.2256 257.1582 c
676.9727 258.4336 676.3457 259.9346 676.3457 261.6602 c
676.3457 263.4326 676.9717 264.9453 678.2246 266.1973 c
679.4766 267.4502 680.9893 268.0771 682.7607 268.0771 c
689.4551 268.0771 l
689.4551 247.5781 L
f
*U
*u
708.7441 252.7969 m
711.1377 252.7969 L
710.4883 251.1357 709.2305 249.7627 707.3662 248.6777 c
705.6035 247.6572 703.79 247.1465 701.9248 247.1465 c
698.9561 247.1465 696.4414 248.1807 694.3818 250.25 c
692.3223 252.3184 691.293 254.8379 691.293 257.8066 c
691.293 260.7656 692.3252 263.2822 694.3887 265.3564 c
696.4531 267.4297 698.9648 268.4668 701.9248 268.4668 c
703.8818 268.4668 705.7656 267.9287 707.5752 266.8525 c
709.5322 265.6924 710.7754 264.2266 711.3047 262.4551 c
708.9668 262.4551 L
708.335 263.6006 707.333 264.5625 705.9609 265.3389 c
704.6055 266.0879 703.2607 266.4629 701.9248 266.4629 c
699.5498 266.4629 697.5596 265.6191 695.9551 263.9316 c
694.3496 262.2441 693.5469 260.21 693.5469 257.8271 c
693.5469 255.4639 694.3447 253.4336 695.9404 251.7373 c
697.5732 250.0127 699.5684 249.1504 701.9248 249.1504 c
703.251 249.1504 704.5498 249.4707 705.8213 250.1113 c
707.1943 250.7969 708.168 251.6924 708.7441 252.7969 c
f
*U
*u
713.1416 247.5781 m
713.1416 268.0771 L
715.3125 268.0771 L
715.3125 259.7832 L
719.501 259.7832 L
721.2637 259.7832 722.7529 259.1934 723.9688 258.0156 c
725.1836 256.8369 725.791 255.3896 725.791 253.6738 c
725.791 251.9482 725.1768 250.501 723.9473 249.332 c
722.7178 248.1631 721.2363 247.5781 719.501 247.5781 c
713.1416 247.5781 L
f
1 D
715.3125 257.7783 m
715.3125 249.582 L
719.501 249.582 L
720.624 249.582 721.5771 249.9844 722.3613 250.791 c
723.1445 251.5967 723.5371 252.5596 723.5371 253.6807 c
723.5371 254.8193 723.1494 255.7871 722.375 256.584 c
721.6006 257.3809 720.6426 257.7783 719.501 257.7783 c
715.3125 257.7783 L
f
0 D
727.9063 247.5781 m
727.9063 268.0771 L
730.0635 268.0771 L
730.0635 247.5781 l
727.9063 247.5781 L
f
*U
U

174 -7910 m
(N) *
174 8473 m
(N) *
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
